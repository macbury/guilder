//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use serde::Serialize;
use trading_view::Ticker;

#[derive(Serialize, Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "asset_performances")]
#[serde(rename_all = "camelCase")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub asset_id: String,
  pub price: f64,
  pub last_price: f64,
  pub price_change: f64,
  pub percent_change: f64,
  pub yearly_change: Option<f64>,
  pub yearly_percent_change: Option<f64>,
  pub high_value: f64,
  pub low_value: f64,
  pub low_high_score: f64,
  pub ytd_price: f64,
  pub ytd_change: f64,
  pub ytd_percent_change: f64,
}

impl Entity {
  pub fn find_by_ticker(ticker : &Ticker) -> Select<Entity> {
    let id : String = ticker.clone().into();
    Entity::find_by_id(id)
  }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
  Asset
}

impl RelationTrait for Relation {
  fn def(&self) -> RelationDef {
    Entity::belongs_to(super::assets::Entity)
      .from(Column::AssetId)
      .to(super::assets::Column::Id)
      .into()
  }
}

impl Related<super::assets::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Asset.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<&Model> for Model {
  fn from(model: &Model) -> Self {
    let model = model.clone();
    model.into()
  }
}
