//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use sea_orm::{EntityTrait, ConnectionTrait, Statement};
use serde::Serialize;
use anyhow::Result;

#[derive(Serialize, Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "exchange_rates")]
#[serde(rename_all = "camelCase")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub currency: String,
  pub date: Date,
  pub price: f64
}

impl Entity {
  #[tracing::instrument(level="trace", skip(db))]
  pub async fn refresh(db: &DatabaseConnection) -> Result<()> {
    tracing::trace!("Refreshing materialized view");
    let refresh_query = Statement::from_string(
      db.get_database_backend(),
      "REFRESH MATERIALIZED VIEW exchange_rates;".to_owned()
    );
    db.execute(refresh_query).await?;

    Ok(())
  }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
}

impl RelationTrait for Relation {
  fn def(&self) -> RelationDef {
    todo!()
  }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<&Model> for Model {
  fn from(model: &Model) -> Self {
    let model = model.clone();
    model.into()
  }
}
