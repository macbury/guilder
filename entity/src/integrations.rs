//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(32))")]
pub enum Status {
  #[sea_orm(string_value = "Initializing")]
  Initializing,
  #[sea_orm(string_value = "Syncing")]
  Syncing,
  #[sea_orm(string_value = "Error")]
  Error,
  #[sea_orm(string_value = "Done")]
  Done
}

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(32))")]
pub enum Kind {
  #[sea_orm(string_value = "PKOBP")]
  PKOBP
}


/**
 * Integration contains information about, from where I can pull information into guilder
 */
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "integrations")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  pub name: String,
  pub status: Status,
  pub last_sync_at: Option<DateTimeUtc>,
  pub kind: Kind,
  pub login: String,
  #[serde(skip_serializing)]
  pub password: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
  fn def(&self) -> RelationDef {
    panic!("No RelationDef")
  }
}

impl ActiveModelBehavior for ActiveModel {}

impl ActiveModel {}
