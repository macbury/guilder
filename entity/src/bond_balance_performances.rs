//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use serde::Serialize;

#[derive(Serialize, Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "bond_balance_performances")]
#[serde(rename_all = "camelCase")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub month: Date,
  pub start_price: f64,
  pub price: f64,
  pub currency: String,
  pub total_price_change: f64,
  pub total_percent_change: f64,
  pub month_price_change: f64,
  pub month_percent_change: f64,
  pub total_buyout_price_change: Option<f64>,
  pub month_total_buyout_change: Option<f64>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {

}

impl RelationTrait for Relation {
  fn def(&self) -> RelationDef {
    todo!()
  }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<&Model> for Model {
  fn from(model: &Model) -> Self {
    let model = model.clone();
    model.into()
  }
}
