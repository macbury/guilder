//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "comments")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i64,
  pub date: DateTime,
  pub body: String,
  pub user_id: i32,
  pub model_id: String,
  pub model_type: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::assets::Entity",
    from = "Column::ModelId",
    to = "super::assets::Column::Id",
    on_update = "NoAction",
    on_delete = "Cascade"
  )]
  Users
}

impl Related<super::user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Users.def()
  }
}

impl Entity {
  pub fn find_for_model<'a>(model_id : &'a str, model_type: &'a str) -> Select<Entity> {
    Entity::find()
      .filter(Column::ModelId.eq(model_id))
      .filter(Column::ModelType.eq(model_type))
  }
}

impl ActiveModelBehavior for ActiveModel {}
