//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use trading_view::Ticker;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "assets")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: String,
  pub name: Option<String>,
  pub description: Option<String>,
  pub website_url: Option<String>,
  pub isin: Option<String>,
  pub currency: Option<String>,
  pub logo_url: Option<String>,
  pub country: Option<String>,
  pub currency_logo_url: Option<String>,
  pub exchange: Option<String>,
  pub category_id: Option<i64>,
  pub kind: Option<String>,
}

impl Entity {
  pub fn find_by_ticker(ticker : &Ticker) -> Select<Entity> {
    let id : String = ticker.clone().into();
    Entity::find_by_id(id)
  }
}

impl Model {
  pub fn ticker(&self) -> Ticker {
    self.id.clone().into()
  }

  pub fn secondary_logo_url(&self) -> Option<String> {
    if let Some(currency_logo_url) = self.currency_logo_url.as_ref() {
      return Some(currency_logo_url.clone())
    }

    if self.country.is_some() {
      return self.country_logo_url()
    }

    None
  }

  pub fn country_logo_url(&self) -> Option<String> {
    return self.country.as_ref().map(|country| format!("https://s3-symbol-logo.tradingview.com/country/{}.svg", country))
  }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    has_many = "super::points::Entity",
    from = "Column::Id",
    to = "super::points::Column::ResourceId",
    on_update = "NoAction",
    on_delete = "Cascade"
  )]
  Points,
  #[sea_orm(
    has_many = "super::asset_performances::Entity",
    from = "Column::Id",
    to = "super::asset_performances::Column::AssetId",
    on_update = "NoAction",
    on_delete = "Cascade"
  )]
  AssetStats,
  #[sea_orm(
    belongs_to = "super::categories::Entity",
    from = "Column::CategoryId",
    to = "super::categories::Column::Id",
    on_update = "NoAction",
    on_delete = "SetNull"
  )]
  Category,
}

impl Related<super::points::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Points.def()
  }
}

impl Related<super::asset_performances::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::AssetStats.def()
  }
}

impl Related<super::categories::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Category.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
